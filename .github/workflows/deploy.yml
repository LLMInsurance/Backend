name: Deploy to Cloud Run

# Workload Identity Federation을 사용하는 안전한 배포 방식
# JSON 키 없이 GitHub와 GCP 간 안전한 인증

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  PROJECT_ID: concise-dolphin-465907-s7
  REGION: us-central1
  SERVICE_NAME: llminsurance-backend
  WIF_PROVIDER: projects/983352933205/locations/global/workloadIdentityPools/github-pool/providers/github
  WIF_SERVICE_ACCOUNT: github-actions-wif@concise-dolphin-465907-s7.iam.gserviceaccount.com

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Run tests
      run: ./gradlew test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Debug GitHub context
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Repository owner: ${{ github.repository_owner }}"
        echo "Ref: ${{ github.ref }}"
        echo "Actor: ${{ github.actor }}"
        
    - name: Authenticate to Google Cloud (WIF)
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ env.WIF_PROVIDER }}
        service_account: ${{ env.WIF_SERVICE_ACCOUNT }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Verify WIF Authentication
      run: |
        echo "🔍 Verifying WIF authentication..."
        gcloud config get-value account
        gcloud projects describe $PROJECT_ID --format="value(projectId)"
    
    - name: Configure Docker for Artifact Registry
      run: |
        # 현재 인증 상태 확인
        echo "🔍 Current authentication account:"
        gcloud config get-value account
        
        # 기본 gcloud docker 설정 (WIF와 호환성 더 좋음)
        echo "🔐 Configuring Docker with gcloud helper:"
        gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
        
        # 권한 테스트
        echo "🔍 Testing Artifact Registry access:"
        gcloud artifacts repositories list --location=us-central1 || echo "Repository list failed, but proceeding..."
    
    - name: Build and Push Docker image
      run: |
        # Docker 이미지 빌드
        docker build --platform linux/amd64 -t us-central1-docker.pkg.dev/$PROJECT_ID/llminsurance-backend/$SERVICE_NAME:$GITHUB_SHA .
        
        # 이미지 푸시
        docker push us-central1-docker.pkg.dev/$PROJECT_ID/llminsurance-backend/$SERVICE_NAME:$GITHUB_SHA
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image us-central1-docker.pkg.dev/$PROJECT_ID/llminsurance-backend/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --add-cloudsql-instances=$PROJECT_ID:$REGION:llminsurance-postgres \
          --set-env-vars="SPRING_PROFILES_ACTIVE=prod" \
          --set-env-vars="SPRING_DATASOURCE_URL=jdbc:postgresql://localhost/llminsurance?cloudSqlInstance=$PROJECT_ID:$REGION:llminsurance-postgres&socketFactory=com.google.cloud.sql.postgres.SocketFactory" \
          --set-env-vars="SPRING_DATASOURCE_USERNAME=llminsurance_user" \
          --set-env-vars="SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}" \
          --set-env-vars="JWT_SECRET=${{ secrets.JWT_SECRET }}" \
          --set-env-vars="JWT_EXPIRATION=86400000"
    
    - name: Show deployment URL
      run: |
        echo "🚀 배포 완료!"
        gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)' 