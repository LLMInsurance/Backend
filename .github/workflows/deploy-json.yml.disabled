name: Deploy to Cloud Run

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  PROJECT_ID: concise-dolphin-465907-s7
  REGION: us-central1
  SERVICE_NAME: llminsurance-backend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Run tests
      run: ./gradlew test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Check GitHub Secrets
      run: |
        echo "Checking if required secrets are set..."
        if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
          echo "‚ùå GCP_SA_KEY secret is not set"
          exit 1
        else
          echo "‚úÖ GCP_SA_KEY secret is set"
        fi
        
        if [ -z "${{ secrets.DB_PASSWORD }}" ]; then
          echo "‚ùå DB_PASSWORD secret is not set"
          exit 1
        else
          echo "‚úÖ DB_PASSWORD secret is set"
        fi
        
        if [ -z "${{ secrets.JWT_SECRET }}" ]; then
          echo "‚ùå JWT_SECRET secret is not set"
          exit 1
        else
          echo "‚úÖ JWT_SECRET secret is set"
        fi
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Build and Push Docker image
      run: |
        # Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
        docker build --platform linux/amd64 -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        
        # Ïù¥ÎØ∏ÏßÄ Ìë∏Ïãú
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --add-cloudsql-instances=$PROJECT_ID:$REGION:llminsurance-postgres \
          --set-env-vars="SPRING_PROFILES_ACTIVE=prod" \
          --set-env-vars="SPRING_DATASOURCE_URL=jdbc:postgresql://localhost/llminsurance?cloudSqlInstance=$PROJECT_ID:$REGION:llminsurance-postgres&socketFactory=com.google.cloud.sql.postgres.SocketFactory" \
          --set-env-vars="SPRING_DATASOURCE_USERNAME=llminsurance_user" \
          --set-env-vars="SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}" \
          --set-env-vars="JWT_SECRET=${{ secrets.JWT_SECRET }}" \
          --set-env-vars="JWT_EXPIRATION=86400000"
    
    - name: Show deployment URL
      run: |
        echo "üöÄ Î∞∞Ìè¨ ÏôÑÎ£å!"
        gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)'